## 2-3-4 Tree
# 작성자: 이종은

# 탐색트리이나 이진트리는 아님.
# 조건 1: 자식 노드가 꼭 2개 or 3개 or 4개여야 함.
# 조건 2: 리프 노드가 모두 같은 레벨에 존재해야 함.

# 자식 노드가 2개인 노드를 2-노드라 함.

# 탐색은 BST처럼 key 값 대소 따지며 내려가면 됨.
#                    [48, 60 , 82] 
#       /       |                   |         \
# [40, , ]    [50, 53, 57]   [69,  , ]        [86, 98, ]
# [50, 53, 57] 은 부모 노드의 key 48과 60 사이의 값들.
# [69, , ]은 60과 82 사이. ...
# n개의 노드를 가졌을 때의 높이는 자식 노드를 다 4개씩 갖는다고 하면 가장 높이가 작을 것.
# log4 n <= h <= log2 n
# h = O(log2 n)
# search: O(log n)

# 2-3-4 tree의 insert는 항상 리프 노드에만 삽입 됨.
# 들어갈 리프 노드의 자리가 없을 수 있음.
# 이를 방지 하기 위해 루트 노드부터 내려가면서
# 중간에 4-노드 만나면 두 개로 split 하면서 리프 노드까지 내려감.
# 4-노드의 가운데 key 값은 부모 노드로 올리면서.

#                           [37, , ]
#                          /        \
#           [30, 34, ]                             [48, 60, 82]
#    /          |        \                 /      |          |        \
# [5, , ]  [32, 33, ]   [35, 36, ]   [40, , ] [50, 53, 57] [69, , ]  [86, 98, ]
# 이 2-3-4 tree에 55를 insert 하면 아래와 같다.

#                                       [37, 60, ]
#                     /                      |                  \
#          [30, 34, ]                   [48, 53, ]               [82, , ]
#       /      |      \                /     |    \                  |   \
# [5, , ] [32, 33, ] [35, 36, ]  [40, , ] [50, , ] [55, 57, ]  [69, ,] [86, 98, ]

# 루트 노드가 4-노드면 처음부터 split 해야 함. 이 경우 가운데 key 값이 새로운 루트 노드가 되는 것.
# insert: O(log n)

# delete(x) 지우려는 것의 successor를 찾고 지우고 나서 successor를 넣어야 함.
# successor 대신 predecessor를 찾아서 넣어도 됨.
# predecessor와 successor는 항상 리프 노드에 있음.
# 없앰으로써 부모가 자식 노드가 하나밖에 안 남을 경우(underflow)가 있음.

# 그래서 delete 연산은
# key 값을 찾아 내려가는 와중에
# 자식이 2개인 2-노드를 만나면 3-노드나 4-노드로 바꿈.
# 2-노드를 만나면 해당 노드의 형제 노드들을 파악.
# 형제 노드가 3-노드나 4-노드면 key 빌려 와서 3-노드로 바꿀 수 있는지 파악.
# 형제 노드가 다 2-노드면 형제 노드와 합쳐서 4-노드가 됨(fusion).
# 루트 노드가 2-노드면 3-노드나 4-노드로 바꾸진 않는데,
# 루트 노드가 2-노드, 자식들도 2-노드면
# 자식들과 부모 노드를 합쳐서 이들이 새로운 루트 노드가 됨(높이 감소).
# O(log n) 레벨마다 fusion 작업이 이루어진다고 해도 fusion은 상수 시간에 수행되기에.

#=================================================================================#
# 2-3-4 트리와 레드-블랙 트리의 관계
# 두 트리는 서로 바꿀 수 있음.

## 2-3-4 트리를 레드-블랙 트리로 바꿀 때
# 2-3-4 트리의 2-노드는 블랙 노드로
# 3-노드의 경우 두 레벨에 걸쳐서 쪼개짐. 둘 중 key 값이 더 큰 건 블랙으로, 작은 건 이 블랙의 왼쪽 자식이자 레드로.
# 4-노드의 경우 가운데 key 값을 원래 위치에 놔두고 색깔은 블랙.
# 큰 것과 작은 것은 이 가운데의 자식 노드로 하고 레드.
# 2-노드는 레벨 하나 차지. 3-노드와 4-노드는 두 레벨 차지(첫 번째 레벨은 블랙, 자식이 된 노드들은 레드가 되는데 해당 레벨 자체는 레드뿐만이 아니라 블랙이 있을 수도 있음).
# 2-3-4 트리의 높이를 h라고 하고, 이것을 바꾼 레드-블랙 트리를 h'라 하면
# log4 n <= h <= log2 n
#  h` <= 2*h = 2*log3 n = (2/log2 3)(log2 n) ≒ 1.6*log2 n (모든 노드가 3-노드 이상이라 하면)